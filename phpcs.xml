<?xml version="1.0"?>
<ruleset name="Made_in_Ukraine">
	<description>PHP Code Standards used at made.ua</description>
	<!--
	#########################################################################
		These Code Standards (mostly) Adopted From WordPress Code Standards.
		Revision date - 13.03.2017
	#########################################################################
	-->

	<!-- ##### Path Never Going To Be Tested ##### -->
	<exclude-pattern>tests/*</exclude-pattern>
	<exclude-pattern>vendor/*</exclude-pattern>

	<!--
		Rule: For associative arrays, values should start on a new line.
			Also covers various single-line array whitespace issues.
	-->
	<rule ref="WordPress.Arrays.ArrayDeclarationSpacing">
		<exclude name="WordPress.Arrays.ArrayDeclarationSpacing.NotLowerCase" />
		<exclude name="WordPress.Arrays.ArrayDeclarationSpacing.SpaceAfterKeyword" />
		<exclude name="WordPress.Arrays.ArrayDeclarationSpacing.SpaceInEmptyArray" />
	</rule>


	<!-- https://github.com/Automattic/vip-scanner/blob/master/vip-scanner/checks/ForbiddenPHPFunctionsCheck.php -->
	<rule ref="WordPress.PHP.DiscouragedPHPFunctions">
		<properties>
			<property name="exclude" value="obfuscation" />
		</properties>
	</rule>


	<!--
		https://vip.wordpress.com/documentation/code-review-what-we-look-for/#commented-out-code-debug-code-or-output
	//-->
	<rule ref="WordPress.PHP.DevelopmentFunctions" />
	<rule ref="WordPress.PHP.DevelopmentFunctions.error_log">
		<type>error</type>
	</rule>


	<!--
		https://vip.wordpress.com/documentation/vip/code-review-what-we-look-for/#settings-alteration
	//-->
	<rule ref="WordPress.PHP.DevelopmentFunctions.prevent_path_disclosure">
		<type>error</type>
	</rule>


	<!--
		Rule: Use real tabs and not spaces.
	//-->
	<arg name="tab-width" value="4"/>
	<rule ref="Generic.WhiteSpace.DisallowSpaceIndent"/>


	<!--
		Rule: Note the comma after the last array item: this is recommended.
	//-->
	<rule ref="WordPress.Arrays.ArrayDeclaration">
		<exclude name="WordPress.Arrays.ArrayDeclaration.SingleLineNotAllowed" />
	</rule>


	<!--
		Rule: Use single and double quotes when appropriate.
		If you're not evaluating anything in the string, use single quotes.
	-->
	<rule ref="Squiz.Strings.DoubleQuoteUsage"/>
	<rule ref="Squiz.Strings.DoubleQuoteUsage.ContainsVar">
		<severity>0</severity>
	</rule>


	<!--
		Handbook: PHP - Brace Style.
		Ref: https://make.wordpress.org/core/handbook/coding-standards/php/#brace-style
		Rule: Braces shall be used for all blocks.
	//-->
	<rule ref="Squiz.ControlStructures.ControlSignature" />
	<rule ref="Squiz.ControlStructures.ControlSignature.NewlineAfterOpenBrace">
		<severity>0</severity>
	</rule>

	<!--
		Rule: If you consider a long block unavoidable, please put a short comment at the end ...
		- typically this is appropriate for a logic block, longer than about 35 rows.
	//-->
	<rule ref="Squiz.Commenting.LongConditionClosingComment">
		<properties>
			<property name="lineLimit" value="35" />
			<property name="commentFormat" value="// End %s()." />
		</properties>
		<exclude name="Squiz.Commenting.LongConditionClosingComment.SpacingBefore" />
	</rule>


	<!--
		Rule: Braces should always be used, even when they are not required.
	//-->
	<rule ref="Generic.ControlStructures.InlineControlStructure" />


	<!--
		Handbook: PHP - Use elseif, not else if.
		Ref: https://make.wordpress.org/core/handbook/coding-standards/php/#use-elseif-not-else-if
	//-->
	<rule ref="PSR2.ControlStructures.ElseIfDeclaration"/>


	<!--
		Handbook: PHP - Regular Expressions.
		Ref: https://make.wordpress.org/core/handbook/coding-standards/php/#regular-expressions
		Rule: Perl compatible regular expressions should be used in preference
			  to their POSIX counterparts.
	//-->
	<rule ref="WordPress.PHP.POSIXFunctions" />


	<!--
		Handbook: PHP - No Shorthand PHP Tags.
		Ref: https://make.wordpress.org/core/handbook/coding-standards/php/#no-shorthand-php-tags
		Rule: Never use shorthand PHP start tags. Always use full PHP tags.
	//-->
	<rule ref="Generic.PHP.DisallowShortOpenTag"/>
	<rule ref="Generic.PHP.DisallowAlternativePHPTags"/>


	<!--
		Handbook: PHP - Remove Trailing Spaces.
		Ref: https://make.wordpress.org/core/handbook/coding-standards/php/#remove-trailing-spaces
		Rule: Remove trailing whitespace at the end of each line of code.
	//-->
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>


	<!--
		Rule: Omitting the closing PHP tag at the end of a file is preferred.
	//-->
	<rule ref="PSR2.Files.ClosingTag"/>


	<!--
		Handbook: PHP - Space Usage.
		Ref: https://make.wordpress.org/core/handbook/coding-standards/php/#space-usage
		Rule: Always put spaces after commas, and on both sides of logical,
		 comparison, string and assignment operators.
	//-->
	<rule ref="WordPress.WhiteSpace.OperatorSpacing"/>
	<rule ref="Squiz.Strings.ConcatenationSpacing">
		<properties>
			<property name="spacing" value="1"/>
			<property name="ignoreNewlines" value="true"/>
		</properties>
	</rule>


	<!--
		Rule: Put spaces on both sides of the opening and closing parenthesis of
		if, elseif, foreach, for, and switch blocks.
	//-->
	<rule ref="WordPress.WhiteSpace.ControlStructureSpacing"/>


	<!--
		Rule: Define a function like so: function my_function( $param1 = 'foo', $param2 = 'bar' ) {
	//-->
	<rule ref="Generic.Functions.OpeningFunctionBraceKernighanRitchie">
		<properties>
			<property name="checkClosures" value="true" />
		</properties>
	</rule>
	<rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
		<properties>
			<property name="equalsSpacing" value="1" />
			<property name="requiredSpacesAfterOpen" value="1" />
			<property name="requiredSpacesBeforeClose" value="1" />
		</properties>
		<exclude name="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingBeforeClose" />
	</rule>


	<!--
		Rule: Call a function, like so: my_function( $param1, func_param( $param2 ) );
	//-->
	<rule ref="PEAR.Functions.FunctionCallSignature">
		<properties>
			<property name="requiredSpacesAfterOpen" value="1" />
			<property name="requiredSpacesBeforeClose" value="1" />
		</properties>

		<exclude name="PEAR.Functions.FunctionCallSignature.Indent"/>

	</rule>
	<rule ref="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket">
		<severity>0</severity>
	</rule>
	<rule ref="PEAR.Functions.FunctionCallSignature.CloseBracketLine">
		<severity>0</severity>
	</rule>


	<!--
		Rule: Perform logical comparisons, like so: if ( ! $foo ) {
		Rule: When type casting, do it like so: $foo = (boolean) $bar;
	//-->
	<rule ref="Generic.Formatting.SpaceAfterCast"/>
	<rule ref="Squiz.WhiteSpace.CastSpacing" />
	<rule ref="WordPress.WhiteSpace.CastStructureSpacing"/>


	<!--
		Handbook: PHP - Formatting SQL statements.
		Ref: https://make.wordpress.org/core/handbook/coding-standards/php/#formatting-sql-statements


		Rule: Always capitalize the SQL parts of the statement like UPDATE or WHERE.
			https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/639

		Rule: Functions that update the database should expect their parameters to lack
			SQL slash escaping when passed.
		 https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/640

		Rule: in $wpdb->prepare - only %s and %d are used as placeholders. Note that they are not "quoted"!
		 https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/641

		Rule: Escaping should be done as close to the time of the query as possible,
		 preferably by using $wpdb->prepare()
	// -->
	<rule ref="WordPress.WP.PreparedSQL"/>


	<!--
		Handbook: PHP - Database Queries.
		Ref: https://make.wordpress.org/core/handbook/coding-standards/php/#database-queries
		Rule: Avoid touching the database directly.
	//-->
	<rule ref="WordPress.DB.RestrictedFunctions"/>
	<rule ref="WordPress.DB.RestrictedClasses"/>

	<!--
		Handbook: PHP - Yoda Conditions.
		Ref: https://make.wordpress.org/core/handbook/coding-standards/php/#yoda-conditions
		Rule: When doing logical comparisons, always put the variable on the right side,
		 constants or literals on the left.
	//-->
	<rule ref="WordPress.PHP.YodaConditions"/>


	<!--
		Handbook: PHP - Clever Code.
		Ref: https://make.wordpress.org/core/handbook/coding-standards/php/#clever-code

		Rule: In general, readability is more important than cleverness or brevity.
		 https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/607
	//-->
	<rule ref="Squiz.PHP.DisallowMultipleAssignments"/>
	<rule ref="Generic.Formatting.DisallowMultipleStatements"/>

	<!--
		Handbook: PHP - Don't extract().
		Ref: https://make.wordpress.org/core/handbook/coding-standards/php/#dont-extract
	//-->
	<rule ref="WordPress.Functions.DontExtract"/>

	<!--
		Important to prevent issues with content being sent before headers.
	//-->
	<rule ref="Generic.Files.ByteOrderMark" />


	<!--
		All line endings should be \n.
	//-->
	<rule ref="Generic.Files.LineEndings">
		<properties>
			<property name="eolChar" value="\n"/>
		</properties>
	</rule>


	<!--
		All files should end with a new line.
	//-->
	<rule ref="Generic.Files.EndFileNewline"/>


	<!--
		Lowercase PHP constants, like true, false and null.
		Ref. http://make.wordpress.org/core/handbook/coding-standards/php/#naming-conventions
	//-->
	<rule ref="Generic.PHP.LowerCaseConstant"/>


	<!--
		Lowercase PHP keywords, like class, function and case.
	//-->
	<rule ref="Generic.PHP.LowerCaseKeyword"/>


	<!--
		Class opening braces should be on the same line as the statement.
	//-->
	<rule ref="Generic.Classes.OpeningBraceSameLine"/>

	<!--
		Not in the coding standard handbook: WP specific sniffs.
		Ref: https://make.wordpress.org/core/handbook/best-practices/internationalization/ (limited info)
		Ref: https://developer.wordpress.org/plugins/internationalization/ (more extensive)

		Check for correct usage of the WP i18n functions.
	//-->
	<rule ref="WordPress.WP.I18n"/>

	<!--
		Rule: Escaping
		Ref: https://vip.wordpress.com/documentation/code-review-what-we-look-for/#validation-sanitization-and-escaping
		Ref: https://vip.wordpress.com/documentation/best-practices/security/validating-sanitizing-escaping/
	//-->
	<rule ref="WordPress.XSS.EscapeOutput"/>
	<rule ref="WordPress.CSRF.NonceVerification" />


	<!--
		eval() and create_function()
		https://vip.wordpress.com/documentation/vip/code-review-what-we-look-for/#eval-and-create_functio
	//-->
	<rule ref="Squiz.PHP.Eval"/>
	<rule ref="Squiz.PHP.Eval.Discouraged">
		<type>error</type>
		<message>eval() is a security risk so not allowed.</message>
	</rule>

	<!--
		https://vip.wordpress.com/documentation/code-review-what-we-look-for/#using-in_array-without-strict-parameter
	//-->
	<rule ref="WordPress.PHP.StrictInArray" />



	<!--
		@made_in_ua
	//-->
	<rule ref="Squiz.Commenting.InlineComment.InvalidEndChar">
			<type>warning</type>
	</rule>


	<!--
		Handbook: PHP Documentation Standards
		Ref: https://make.wordpress.org/core/handbook/best-practices/inline-documentation-standards/php/
	//-->
	<rule ref="Squiz.Commenting">
		<!-- Excluded to allow /* translators: ... */ comments -->
		<exclude name="Squiz.Commenting.BlockComment.SingleLine"/>
		<!-- Sniff seems to require indenting with spaces -->
		<exclude name="Squiz.Commenting.BlockComment.FirstLineIndent"/>
		<!-- Sniff seems to require indenting with spaces -->
		<exclude name="Squiz.Commenting.BlockComment.LineIndent"/>
		<!-- Sniff seems to require indenting with spaces -->
		<exclude name="Squiz.Commenting.BlockComment.LastLineIndent"/>
		<!-- @custom - Need to have a comments a code blocks separation. -->
		<exclude name="Squiz.Commenting.BlockComment.NoNewLine"/>
		<!-- WP requires /** for require() et al. See https://github.com/squizlabs/PHP_CodeSniffer/pull/581 -->
		<exclude name="Squiz.Commenting.BlockComment.WrongStart"/>
		<!-- WP handbook doesn't clarify one way or another, so ignore -->
		<exclude name="Squiz.Commenting.BlockComment.NoEmptyLineAfter"/>

		<!-- WP prefers indicating @since, @package, @subpackage etc in class comments -->
		<exclude name="Squiz.Commenting.ClassComment.TagNotAllowed"/>

		<!-- WP doesn't require //end ... for classes and functions -->
		<exclude name="Squiz.Commenting.ClosingDeclarationComment.Missing"/>

		<!-- Excluded to allow param documentation for arrays  -->
		<exclude name="Squiz.Commenting.DocCommentAlignment.SpaceAfterStar"/>

		<!-- WP doesn't require a @author value for Squiz -->
		<exclude name="Squiz.Commenting.FileComment.IncorrectAuthor"/>
		<!-- WP doesn't require a @copyright value for Squiz -->
		<exclude name="Squiz.Commenting.FileComment.IncorrectCopyright"/>
		<!-- WP doesn't require @author tags -->
		<exclude name="Squiz.Commenting.FileComment.MissingAuthorTag"/>
		<!-- WP doesn't require @subpackage tags -->
		<exclude name="Squiz.Commenting.FileComment.MissingSubpackageTag"/>
		<!-- WP doesn't require @copyright tags -->
		<exclude name="Squiz.Commenting.FileComment.MissingCopyrightTag"/>
		<!-- WP has a different prefered order of tags -->
		<exclude name="Squiz.Commenting.FileComment.PackageTagOrder"/>
		<!-- WP has a different prefered order of tags -->
		<exclude name="Squiz.Commenting.FileComment.SubpackageTagOrder"/>
		<!-- WP has a different prefered order of tags -->
		<exclude name="Squiz.Commenting.FileComment.AuthorTagOrder"/>
		<!-- WP has a different prefered order of tags -->
		<exclude name="Squiz.Commenting.FileComment.CopyrightTagOrder"/>

		<!-- WP prefers int and bool instead of integer and boolean -->
		<exclude name="Squiz.Commenting.FunctionComment.IncorrectParamVarName"/>
		<!-- WP prefers int and bool instead of integer and boolean -->
		<exclude name="Squiz.Commenting.FunctionComment.InvalidReturn"/>
		<!-- WP prefers indicating a @return null for early returns -->
		<exclude name="Squiz.Commenting.FunctionComment.InvalidReturnNotVoid"/>
		<!-- WP states not all functions require @return -->
		<exclude name="Squiz.Commenting.FunctionComment.MissingReturn"/>
		<!-- Excluded to allow param documentation for arrays  -->
		<exclude name="Squiz.Commenting.FunctionComment.ParamCommentNotCapital"/>
		<!-- Excluded to allow param documentation for arrays  -->
		<exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamName"/>
		<!-- WP doesn't require type hints -->
		<exclude name="Squiz.Commenting.FunctionComment.TypeHintMissing"/>

		<!-- Exclude to allow duplicate hooks to be documented -->
		<exclude name="Squiz.Commenting.InlineComment.DocBlock"/>
		<!-- Excluded to allow /* translators: ... */ comments -->
		<exclude name="Squiz.Commenting.InlineComment.NotCapital"/>
		<!-- Excluded all issues regarding commented inline code. -->
		<exclude name="Squiz.Commenting.InlineComment.SpacingAfter"/>


		<!--todo Not in Inline Docs standard, and a code smell -->
		<exclude name="Squiz.Commenting.LongConditionClosingComment"/>

		<!--TODO Not in Inline Docs standard, and needed to bypass WPCS checks -->
		<exclude name="Squiz.Commenting.PostStatementComment"/>

		<!--@todo WP prefers int and bool instead of integer and boolean -->
		<exclude name="Squiz.Commenting.VariableComment.IncorrectVarType"/>
		<!--FIXME WP demands a @since tag for class variables -->
		<exclude name="Squiz.Commenting.VariableComment.TagNotAllowed"/>
		<!--@fixme WP prefers @since first -->
		<exclude name="Squiz.Commenting.VariableComment.VarOrder"/>

		<!--@issue It is too early for PHP7 features to be required -->
		<exclude name="Squiz.Commenting.FunctionComment.ScalarTypeHintMissing" />
	</rule>



	<rule ref="Generic.Commenting">
		<!-- WP has different alignment of tag values -->
		<exclude name="Generic.Commenting.DocComment.TagValueIndent"/>
		<!-- WP has a different prefered order of tags -->
		<exclude name="Generic.Commenting.DocComment.ParamNotFirst"/>
		<!-- Excluded to allow param documentation for arrays  -->
		<exclude name="Generic.Commenting.DocComment.ParamGroup"/>
		<!-- WP prefers no empty line between @param tags and @return -->
		<exclude name="Generic.Commenting.DocComment.NonParamGroup"/>
		<!-- Excluded to allow param documentation for arrays  -->
		<exclude name="Generic.Commenting.DocComment.TagsNotGrouped"/>
		<!-- Exclude to allow duplicate hooks to be documented -->
		<exclude name="Generic.Commenting.DocComment.ContentAfterOpen"/>
		<!-- Exclude to allow duplicate hooks to be documented -->
		<exclude name="Generic.Commenting.DocComment.SpacingBeforeShort"/>
		<!-- Exclude to allow duplicate hooks to be documented -->
		<exclude name="Generic.Commenting.DocComment.ContentBeforeClose"/>
		<!-- WP allows @todo's in comments -->
		<exclude name="Generic.Commenting.Todo.CommentFound"/>
		<!-- WP allows @todo's in comments -->
		<exclude name="Generic.Commenting.Todo.TaskFound"/>
	</rule>


	<!-- exclude the 'empty' index files from some documentation checks -->
	<rule ref="Squiz.Commenting.FileComment.WrongStyle">
		<exclude-pattern>*/index.php</exclude-pattern>
	</rule>
	<rule ref="Squiz.Commenting.InlineComment.SpacingAfter">
		<exclude-pattern>*/index.php</exclude-pattern>
	</rule>


</ruleset>
